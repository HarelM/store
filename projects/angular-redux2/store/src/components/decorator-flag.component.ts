/**
 * Import third-party libraries
 */

import { AnyAction, Reducer, Store } from 'redux';

/**
 * Services
 */

import { NgRedux } from '../services/ng-redux.service';

/**
 * Interfaces
 */

import { PathSelector } from '../interfaces/store.interface';
import { LOCAL_REDUCER_KEY, SELECTION_KEY, SUBSTORE_KEY, SubstoreFlag } from '../interfaces/fractal.interface';

/**
 * Decorator instance flag manager.
 */

export class DecoratorFlagComponent {

    /**
     * Hold decorator class instance
     */

    private readonly decoratedInstance: any;

    /**
     * Build flag management instance
     * @param decoratedInstance - decorator class instance.
     */

    constructor(decoratedInstance: any) {
        this.decoratedInstance = decoratedInstance;

        this.decoratedInstance[SUBSTORE_KEY] ??= {};
        this.decoratedInstance[SELECTION_KEY] ??= {};
    }

    /**
     * Get local reducer from decorator instance
     * @return Reducer<any, AnyAction> | undefined
     */

    get reducer(): Reducer<any, AnyAction> | undefined {
        return this.decoratedInstance.constructor[LOCAL_REDUCER_KEY];
    }

    /**
     * Get base-path from instance getBasePath function.
     * this can change on run time,
     * so we track the change and update accordingly.
     *
     * @return PathSelector | undefined
     */

    get basePath(): PathSelector | undefined {
        if (typeof this.decoratedInstance.getBasePath !== 'function') {
            return undefined;
        }

        return this.decoratedInstance.getBasePath();
    }

    /**
     * Get selection from caching
     * @return { [key: string | symbol]: any }
     */

    get selections(): { [key: string | symbol]: any } {
        return this.getInstanceFlag(SELECTION_KEY);
    }

    /**
     * Get active root store.
     *
     * @return NgRedux<any>
     */

    get store(): NgRedux<any> {
        const reducer = this.reducer;
        const basePath = this.basePath;
        const substore: SubstoreFlag = this.getInstanceFlag(SUBSTORE_KEY);

        // if it is not decorated with `@WithSubStore`. Return the root store.
        if (reducer && basePath) {
            return this.factorySubstoreInstance(substore, basePath, reducer);
        }

        return <any>NgRedux.store;
    }

    /**
     * Get flag saved in the instance
     * @param flagName - the flag name.
     *
     * @return any - value of flag.
     */

    private getInstanceFlag(flagName: string): any {
        return this.decoratedInstance[flagName];
    }

    /**
     * Factory substore instance.
     *
     * @param substoreCache - cache of base-path && substore instance.
     * @param basePath - result generated by instance.getBasePath() function.
     * @param reducer - the instance local reducer.
     *
     * @return NgRedux<any>
     */

    private factorySubstoreInstance(substoreCache: SubstoreFlag, basePath: PathSelector, reducer: Reducer<any, AnyAction>): NgRedux<any> {
        if (!substoreCache.instance || substoreCache.cachePath !== (basePath || []).toString()) {
            this.decoratedInstance[SUBSTORE_KEY] = {
                cachePath: (basePath || []).toString(),
                instance: NgRedux.store.configureSubStore(basePath, reducer)
            };
        }

        return this.getInstanceFlag(SUBSTORE_KEY).instance;
    }
}
